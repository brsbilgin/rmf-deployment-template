apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rmf-web-rmf-server-db
  labels:
    app: rmf-web-rmf-server
    tier: db
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: rmf-web-rmf-server-db
  labels:
    app: rmf-web-rmf-server
    tier: db
spec:
  selector:
    app: rmf-web-rmf-server
    tier: db
  ports:
    - port: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rmf-web-rmf-server-db
  labels:
    app: rmf-web-rmf-server
    tier: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rmf-web-rmf-server
      tier: db
  template:
    metadata:
      labels:
        app: rmf-web-rmf-server
        tier: db
    spec:
      containers:
        - name: postgresql
          image: postgres:13
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: rmf-web-rmf-server-secret
                  key: DB_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rmf-web-rmf-server-secret
                  key: DB_PASSWORD
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: rmf-web-rmf-server-db
      volumes:
        - name: rmf-web-rmf-server-db
          persistentVolumeClaim:
            claimName: rmf-web-rmf-server-db
---
apiVersion: v1
kind: Service
metadata:
  name: rmf-web-rmf-server
  labels:
    app: rmf-web-rmf-server
    tier: app
spec:
  selector:
    app: rmf-web-rmf-server
    tier: app
  ports:
    - protocol: TCP
      port: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: rmf-web-rmf-server-ws
  labels:
    app: rmf-web-rmf-server-ws
    tier: app
spec:
  selector:
    app: rmf-web-rmf-server
    tier: app
  ports:
    - protocol: TCP
      port: 8001
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rmf-web-rmf-server
  labels:
    app: rmf-web-rmf-server
    tier: app
spec:
  selector:
    matchLabels:
      app: rmf-web-rmf-server
      tier: app
  template:
    metadata:
      labels:
        app: rmf-web-rmf-server
        tier: app
    spec:
      containers:
        - name: rmf-web-rmf-server
          image: {{ .Values.builder_ns }}/rmf-web-rmf-server
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          env:
            - name: RMF_USE_SIM_TIME
              value: {{ .Values.global.RMF_USE_SIM_TIME | quote }}
            - name: {{ .Values.global.DDS_ENV | quote }}
              value: {{ .Values.global.DDS_CONFIG | quote }}
            - name: ROS_DOMAIN_ID
              value: {{ .Values.global.ROS_DOMAIN_ID | quote }}
            - name: RMW_IMPLEMENTATION
              value: {{ .Values.global.RMW_IMPLEMENTATION | quote }}
            - name: RMF_API_SERVER_CONFIG
              value: /rmf-web-rmf-server-config/rmf_server_config.py
            - name: RMF_SERVER_USE_SIM_TIME
              value: {{ .Values.global.RMF_USE_SIM_TIME | quote }}
          volumeMounts:
            - mountPath: /rmf-web-rmf-server-config
              name: rmf-web-rmf-server-configmap
            - mountPath: {{ .Values.global.DDS_CONFIG_MOUNTPATH | quote }}
              name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
            - mountPath: /jwt-configmap
              name: jwt-pub-key
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      volumes:
        - name: rmf-web-rmf-server-configmap
          configMap:
            name: rmf-web-rmf-server-configmap
        - name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
          configMap:
            name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
        - name: jwt-pub-key
          configMap:
            name: jwt-pub-key

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rmf-web-rmf-server
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  rules:
    - host: {{ .Values.hostName | quote }}
      http:
        paths:
          - path: /rmf/api/v1(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: rmf-web-rmf-server
                port:
                  number: 8000
  tls:
    - hosts:
        - {{ .Values.hostName | quote }}
      secretName: letsencrypt-prod

---
apiVersion: v1
kind: Service
metadata:
  name: rmf-web-dashboard
  labels:
    app: rmf-web-dashboard
spec:
  selector:
    app: rmf-web-dashboard
  ports:
    - protocol: TCP
      port: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rmf-web-dashboard
  labels:
    app: rmf-web-dashboard
spec:
  selector:
    matchLabels:
      app: rmf-web-dashboard
  template:
    metadata:
      labels:
        app: rmf-web-dashboard
    spec:
      containers:
        - name: rmf-web-dashboard
          image: {{ .Values.builder_ns }}/rmf-web-dashboard
          ports:
            - containerPort: 80
          env:
            - name: REACT_APP_TRAJECTORY_SERVER
              value: {{ .Values.global.REACT_APP_TRAJECTORY_SERVER | quote }}
            - name: REACT_APP_RMF_SERVER
              value: {{ .Values.global.REACT_APP_RMF_SERVER | quote }}
            - name: REACT_APP_KEYCLOAK_CONFIG
              value: {{ .Values.global.REACT_APP_KEYCLOAK_CONFIG | quote }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rmf-web-dashboard
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  rules:
    - host: {{ .Values.hostName | quote }}
      http:
        paths:
          - path: /dashboard
            pathType: Prefix
            backend:
              service:
                name: rmf-web-dashboard
                port:
                  number: 80
  tls:
    - hosts:
        - {{ .Values.hostName | quote }}
      secretName: letsencrypt-prod

---
apiVersion: v1
kind: Service
metadata:
  name: rmf-trajectory-visualizer
  labels:
    app: rmf-trajectory-visualizer
spec:
  selector:
    app: rmf-trajectory-visualizer
  ports:
    - protocol: TCP
      port: 8006

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rmf-trajectory-visualizer
  labels:
    app: rmf-trajectory-visualizer
spec:
  selector:
    matchLabels:
      app: rmf-trajectory-visualizer
  template:
    metadata:
      labels:
        app: rmf-trajectory-visualizer
    spec:
      restartPolicy: Always
      hostNetwork: true
      containers:
        - name: rmf-trajectory-visualizer
          image: {{ .Values.builder_ns }}/rmf
          imagePullPolicy: Always
          env:
            - name: RMF_USE_SIM_TIME
              value: {{ .Values.global.RMF_USE_SIM_TIME | quote }}
            - name: {{ .Values.global.DDS_ENV | quote }}
              value: {{ .Values.global.DDS_CONFIG | quote }}
            - name: ROS_DOMAIN_ID
              value: {{ .Values.global.ROS_DOMAIN_ID | quote }}
            - name: RMW_IMPLEMENTATION
              value: {{ .Values.global.RMW_IMPLEMENTATION | quote }}
            - name: RMF_TRAJECTORY_VISUALIZER_LEVEL_NAME
              value: {{ .Values.global.RMF_TRAJECTORY_VISUALIZER_LEVEL_NAME | quote }}
          command: ["/bin/bash"]
          args: 
            - -c
            - > 
              /ros_entrypoint.sh
              ros2 launch rmf_visualization visualization.launch.xml
              headless:=1
              use_sim_time:=$(RMF_USE_SIM_TIME)
              map_name:=$(RMF_TRAJECTORY_VISUALIZER_LEVEL_NAME)
          ports:
           - containerPort: 8006
          volumeMounts:
            - mountPath: {{ .Values.global.DDS_CONFIG_MOUNTPATH | quote }}
              name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
      volumes:
        - name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
          configMap:
            name: {{ .Values.global.DDS_CONFIG_VOLUME | quote }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rmf-trajectory-visualizer
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  rules:
    - host:  {{ .Values.hostName | quote }}
      http:
        paths:
          - path: /trajectory
            pathType: Prefix
            backend:
              service:
                name: rmf-trajectory-visualizer
                port:
                  number: 8006
  tls:
    - hosts:
        -  {{ .Values.hostName | quote }}
      secretName: tls-certificate-secret-name
